(ns jameslintaylor.doctest.format-test
  (:require
   [clojure.test :refer [deftest is]]
   [jameslintaylor.doctest.format :as format]))

(deftest form-str-test
  (is (= "(foo bar\n     baz\n     qux)"
         (format/form-str (format/wrap 2 '(foo bar baz qux))))
      "wrapped lines are on new lines and indented")
  (is (= "(foo (foo bar\n          baz))"
         (format/form-str `(~'foo ~(format/wrap 2 '(foo bar baz)))))
      "Nested forms are treated")
  (is (= "\"abc\"" (format/form-str "abc"))
      "strings are wrapped in literal quotes")
  (is (= "#\"abc\"" (format/form-str #"abc"))
      "regex patterns are wrapped as a regex literal")
  (is (= "nil" (format/form-str nil))
      "nil is handled"))

(deftest assertion-form-test
  (is (= '(is (= :foo :bar))
         (format/assertion-form {:expr     :bar
                                 :expected :foo})))
  (is (= '(is (= :foo :bar) "foobar")
         (format/assertion-form {:expr     :bar
                                 :expected :foo
                                 :msg      "foobar"}))))

(deftest test-form-test
  (let [ns (create-ns 'test)]
    (intern ns 'bar)
    (with-bindings {#'format/*resolve-ns* ns
                    #'format/*refer-syms* #{'foo}}
      (is (= `(~'deftest ~(symbol "^:doctest") ~'foo-test
               (~'is (~'= :foo (~'foo 1)))
               (~'is (~'= :foo (~'foo nil))
                "foo always returns :foo")
               (~'is (~'= true (~'= (~'foo 1) (~'test/bar 2)))))
             (format/test-form 'foo
                               [{:expr     '(foo 1)
                                 :expected :foo}
                                {:msg      "foo always returns :foo"
                                 :expr     '(foo nil)
                                 :expected :foo}
                                {:expr     '(= (foo 1) (bar 2))
                                 :expected true}]))))))

(deftest ns-form-test
  (with-bindings {#'format/*resolve-ns* (create-ns 'test)
                  #'format/*refer-syms* #{'foo 'bar 'baz}}
    (is (= `(~'ns ~'test-doctest
             "Generated by doctest."
             (:require [clojure.test :refer [~'deftest ~'is]]
                       [~'test :refer [~'bar ~'baz ~'foo]]))
           (format/ns-form)))))
