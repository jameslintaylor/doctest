(ns jameslintaylor.doctest.format
  "Docstring formatting utilities."
  (:require
   [cljfmt.main :as cljfmt]
   [clojure.string :as string]
   [clojure.test :as test]
   [jameslintaylor.doctest.parse :as parse]))

(def ^:private format-cljfmt
  (comp (partial #'cljfmt/reformat-string {}) format))

(defn assertion-form
  [assertion]
  (let [{:keys [expected expr msg]} assertion]
    (if msg
      `(test/is (= ~expected ~expr) ~msg)
      `(test/is (= ~expected ~expr)))))

(defn var-test-form
  [var]
  (when-let [assertions (parse/doctest-assertions var)]
    `(test/deftest ~(symbol (str (-> var meta :name) "-test"))
       ~@(map assertion-form assertions))))

(defn ns-form
  [ns]
  `(~'ns ~(symbol (str ns "-test"))
     "Generated by doctest."
     (:require
      clojure.test
      ~(symbol (str ns)))))

(defn form-str
  [form]
  (cond
    ;; Surround strings in literal quotes
    (string? form)
    (format "\"%s\"" form)

    (seq? form)
    (let [[fst snd & rest] form]
      (format-cljfmt "(%s %s%s)"
                     fst
                     snd
                     (apply str (map (comp (partial str "\n") form-str) rest)))) 
    
    :else form))

(defn format-test-file
  [ns]
  (let [var-tests (into []
                        (comp (filter parse/has-doctest?)
                              (map var-test-form)
                              (map form-str))
                        (vals (ns-interns ns)))]
    (format "%s%s"
            (form-str (ns-form ns))
            (apply str (map (partial str "\n\n") var-tests)))))
